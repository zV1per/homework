#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include "sort.h"
#include <time.h>
#include <cstdlib>

using namespace std;

int main11(void)
{
	freopen("≤‚ ‘Ω·π˚.txt", "w", stdout);

	int a[100]{ 7147,1000,3356,1124,8368,7225,9387,851,6290,9572,8164,7006,5544,1436,9610,1522,7798,5528,6433,4290,7133,226,6872,2251,1604,1268,9134,5783,743,7562,9060,3980,528,5680,1072,2030,3810,9500,1606,6364,6867,2136,1040,9216,6748,6416,198,5906,7676,8589,8795,3462,720,962,1778,8645,4528,7830,8221,1664,3940,4396,6285,2970,1612,2500,6284,3380,1437,5359,159,9399,5005,5422,9948,3212,3180,4384,1900,1110,190,4088,5684,1395,8700,3276,1480,516,6252,1312,2254,5947,6084,7200,5309,1104,984,747,9270,2882 };
	int b[100]{ 7147,1000,13356,21124,48368,17225,49387,40851,16290,39572,38164,47006,15544,1436,39610,41522,27798,15528,16433,44290,47133,40226,26872,2251,41604,21268,9134,5783,20743,17562,29060,23980,20528,35680,41072,2030,23810,29500,1606,46364,26867,22136,21040,29216,46748,46416,40198,5906,7676,18589,28795,33462,720,30962,31778,28645,44528,47830,48221,11664,23940,24396,16285,2970,31612,2500,26284,3380,1437,45359,20159,9399,45005,45422,19948,3212,3180,34384,31900,1110,10190,14088,45684,11395,8700,33276,1480,516,46252,1312,2254,5947,16084,37200,15309,21104,10984,10747,39270,42882 };
	int c[100]{ 157147,51000,13356,171124,198368,167225,149387,90851,166290,39572,38164,197006,15544,51436,89610,141522,27798,15528,16433,144290,47133,90226,26872,152251,41604,21268,109134,55783,170743,17562,179060,73980,70528,35680,91072,152030,123810,79500,101606,146364,176867,172136,71040,29216,96748,46416,40198,55906,157676,68589,178795,183462,50720,30962,31778,128645,94528,147830,198221,161664,173940,124396,66285,2970,181612,52500,26284,103380,151437,145359,120159,159399,145005,95422,19948,3212,3180,134384,131900,51110,110190,114088,95684,111395,108700,133276,101480,516,46252,151312,2254,105947,66084,137200,65309,121104,160984,110747,89270,42882 };
	int d[1000]{ 47,0,56,24,68,25,87,51,90,72,64,6,44,36,10,22,98,28,33,90,33,26,72,51,4,68,34,83,43,62,60,80,28,80,72,30,10,0,6,64,67,36,40,16,48,16,98,6,76,89,95,62,20,62,78,45,28,30,21,64,40,96,85,70,12,0,84,80,37,59,59,99,5,22,48,12,80,84,0,10,90,88,84,95,0,76,80,16,52,12,54,47,84,0,9,4,84,47,70,82,44,85,0,64,94,92,96,78,75,99,1,42,0,44,80,38,22,13,84,96,2,30,78,20,16,68,60,88,32,75,98,4,38,22,79,32,88,0,0,7,68,89,65,70,70,88,69,24,26,69,4,56,75,66,92,0,54,97,84,23,13,34,35,52,30,16,70,14,36,18,15,5,96,40,28,18,72,64,12,69,50,18,96,88,72,40,5,18,28,24,35,78,50,78,36,16,48,10,39,86,10,84,20,60,51,98,75,32,56,41,96,65,75,64,92,0,20,62,0,55,60,32,50,60,80,75,44,16,86,54,84,52,88,0,60,70,50,52,94,76,52,55,98,75,12,60,24,8,57,75,40,32,80,81,17,60,60,44,40,98,0,24,55,0,62,80,68,16,31,50,80,12,0,44,60,0,55,96,82,82,27,9,12,4,32,85,67,85,88,80,86,56,88,33,16,81,85,16,50,66,94,75,75,70,84,15,0,79,62,58,8,80,76,0,33,25,4,47,72,36,8,20,0,80,44,40,39,20,50,33,50,42,40,52,65,60,84,87,0,24,44,47,47,60,62,77,45,96,24,28,60,68,50,60,89,12,23,78,10,60,88,47,64,76,50,25,66,6,32,44,75,40,88,78,15,16,0,60,60,23,4,24,10,3,21,0,75,4,36,91,67,69,96,80,18,52,40,7,0,16,88,10,30,37,52,57,62,20,68,75,55,4,60,88,75,32,56,56,17,20,12,75,40,76,16,12,68,10,65,30,75,82,0,8,29,32,96,82,2,68,52,21,52,0,44,50,4,28,87,22,72,46,80,46,39,2,52,13,45,68,5,22,36,70,74,88,87,35,53,0,44,55,25,70,56,28,50,16,0,91,85,80,24,64,84,4,90,49,52,0,35,54,11,35,0,4,0,37,80,84,76,56,5,16,16,42,84,40,2,44,35,46,84,90,13,8,36,49,72,80,26,4,70,92,30,84,92,34,62,88,40,51,74,88,82,56,46,76,32,25,26,14,40,0,22,96,80,25,54,92,46,28,80,25,82,0,20,10,0,94,8,44,72,94,25,75,20,80,20,34,64,81,90,50,50,32,86,48,96,59,75,48,51,80,44,85,96,88,76,12,60,6,73,49,35,25,0,35,24,82,0,35,29,96,98,68,20,46,20,62,80,36,10,40,12,34,53,75,0,22,72,8,36,54,20,84,6,44,2,70,0,64,84,44,87,26,56,84,86,68,20,92,50,64,13,62,36,88,68,56,46,64,81,60,80,6,59,50,8,50,68,89,55,9,48,60,42,29,40,84,70,51,5,63,20,56,62,60,58,80,38,20,16,94,54,55,78,50,72,38,28,46,15,75,96,80,40,76,20,10,90,4,96,88,36,16,4,80,8,7,15,0,76,73,42,0,60,43,40,64,80,75,54,56,72,40,80,65,0,72,90,62,67,89,40,76,80,2,2,91,28,40,36,31,90,4,42,59,40,29,12,32,2,52,0,96,80,36,8,80,20,62,27,90,95,36,84,82,50,3,95,28,47,60,44,96,6,40,43,56,86,24,9,64,34,28,78,65,93,80,36,62,10,2,60,25,93,84,20,17,50,75,50,45,48,24,32,4,10,97,95,98,97,68,84,58,76,40,40,81,44,91,10,82,92,76,55,28,30,24,82,22,70,84,96,60,28,50,39,65,68,45,2,50,47,90,95,88,72,56,30,55,4,80,15,94,68,88,86,12,80,52,56,82,55,84,8,16,20,15,14,0,23,75,40,77,28,2,20,94,92,24,45,44,62,96,0,54,44,95,7,12,7,81,82,55,12,80,25,84,32,8,40,40,43,68,64,20,23,77,27,20,10,0,80,75,68,4,64,0,50,70,80,94,40,40,94,40,2,60,20,0,30,8,8,40,25,32,10,6,62,76,24,38,0,65,55,20,21,55,41,56,57,54,99,80,92,27,28,30,35,78,76,20,10,80,95,70,87,90,74,70,52,4,65,70,30,5,69,46,47,10,46,72,36,92,23,60,27,24,73,63,65,45,50,2,12,25,34,78 };
	int temp1[100]{ 0 }, temp2[1000]{ 0 };
	
	clock_t begin = clock();
	cout << "insertSort" << endl;
	insertSort(a, 100);
	clock_t end = clock();
	int duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	insertSort(b, 100);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	insertSort(c, 100);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	insertSort(d, 1000);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< endl;

	cout << "MergeSort" << endl;

	begin = clock();
	MergeSort(a, 0, 99, temp1);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	MergeSort(b, 0, 99, temp1);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	MergeSort(c, 0, 99, temp1);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	MergeSort(d, 0, 999, temp2);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< endl;

	cout << "QuickSort_Recursion" << endl;

	begin = clock();
	QuickSort_Recursion(a, 0, 99);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	QuickSort_Recursion(b, 0, 99);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	QuickSort_Recursion(c, 0, 99);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	QuickSort_Recursion(d, 0, 999);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< endl;

	cout << "CountSort" << endl;

	begin = clock();
	CountSort(a, 0, 99);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	CountSort(b, 0, 99);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	CountSort(c, 0, 99);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	CountSort(d, 0, 999);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< endl;

	cout << "RadixCountSort" << endl;

	begin = clock();
	RadixCountSort(a, 100);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	RadixCountSort(b, 100);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	RadixCountSort(c,100);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< '\t';

	begin = clock();
	RadixCountSort(d, 1000);
	end = clock();
	duration = (end - begin) ;
	cout << duration <<"ms"<< endl;

	return 0;
}

int main(void) 
{
	int cnt = 0;
	int a[1000]{ 0 };
	freopen("≈≈–Ú.txt", "r", stdin);
	while (cin.peek()!=-1)
	{
		cin >> a[cnt];
		cnt++;
	}
	RadixCountSort(a, cnt);
	freopen("≈≈–Ú.txt", "w", stdout);
	for (size_t i = 0; i < cnt; i++)
	{
		cout << a[i] << ' ';
	}
	return 0;
}
